package com.tomtresansky.gradle.plugin.schemaspy;

import org.gradle.api.Task;
import org.gradle.api.internal.CollectionCallbackActionDecorator;
import org.gradle.api.reporting.DirectoryReport;
import org.gradle.api.reporting.Report;
import org.gradle.api.reporting.internal.TaskGeneratedSingleDirectoryReport;
import org.gradle.api.reporting.internal.TaskReportContainer;

import com.google.common.base.Preconditions;

import javax.inject.Inject;

/**
 * Concrete implementation of {@link SchemaSpyReportContainer} which represents
 * the set of reports that can be generated by the {@link SchemaSpyReportTask}.
 * <P>
 * This will point to the <code>index.html</code> file produced by SchemaSpy.
 * <p>
 * Just like {@link SchemaSpyExtension} this class can <strong>NOT</strong> be
 * <code>final</code>.
 * <p>
 * This class <strong>MUST be a java class</strong> or else this project will
 * <strong>NOT</strong> compile under gradle. See <a href=
 * "https://discuss.gradle.org/t/incompatible-return-type-error-when-using-reportcontainer-and-taskreportcontainer/1735"
 * >this thread in the gradle forums</a> and <a
 * href="https://jira.codehaus.org/browse/GROOVY-5418">this groovy issue</a> for
 * more information.
 *
 * @author Tom
 */
public abstract class SchemaSpyReportsImpl extends TaskReportContainer<TaskGeneratedSingleDirectoryReport> implements SchemaSpyReportContainer {
  /**
   * Constructor passes the {@link Task task} param on to the super-constructor, then adds a reference to
   * the <code>index.html</code> file produced by SchemaSpy to the reports collection.
   *
   * @param task the current instance of the task using this container (<em>may <strong>NOT</strong> be <code>null</code></em>)
   * @param callbackActionDecorator additional configuration to be done on the task
   */
  @Inject
  public SchemaSpyReportsImpl(Task task, CollectionCallbackActionDecorator callbackActionDecorator) {
    super(TaskGeneratedSingleDirectoryReport.class, task, callbackActionDecorator);

    add(TaskGeneratedSingleDirectoryReport.class, "html", task, "index.html");
  }

  @Override
  public DirectoryReport getHtml() {
    return getByName("html");
  }
}
