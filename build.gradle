plugins {
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'com.gradle.plugin-publish' version '0.14.0'
}

apply plugin: 'groovy'

sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'Gradle SchemaSpy plugin'
group = 'com.tomtresansky.gradle.plugin.schemaspy'
version = '1.0'

repositories {
  mavenCentral()
}

dependencies {
  def groovy = [group:'org.codehaus.groovy', name:'groovy-all', version:'2.3.10']
  implementation groovy

  implementation 'com.google.guava:guava:18.0'
  implementation 'org.jumpmind.symmetric.schemaspy:schemaspy:5.0.0'
}

pluginBundle {
  website = 'https://github.com/tresat/gradle-schemaspy-plugin'
  vcsUrl = 'https://github.com/tresat/gradle-schemaspy-plugin'
  tags = ['schemaspy', 'reporting', 'database']
}

gradlePlugin {
  plugins {
    schemaspyPlugin {
      id = 'com.tomtresansky.gradle.plugin.schemaspy'
      displayName = 'Gradle Schema Spy Plugin'
      description = 'A plugin for Gradle to allow for running SchemaSpy as a part of the buildDashboard plugin.'
      implementationClass = 'com.tomtresansky.gradle.plugin.schemaspy.SchemaSpyPlugin'
    }
  }
}

/***********************************************************************************************************************
 *
 * Testing setup - this can hopefully be greatly simplified with Gradle 7.3 and Test Suites.
 *
 ***********************************************************************************************************************/

def integTestSourceSet = sourceSets.create("integTest")
def funcTestSourceSet = sourceSets.create("funcTest")

dependencies {
  integTestImplementation(project)
  funcTestImplementation(project)

  testImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
  integTestImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
  funcTestImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
}

def integTestTask = tasks.register("integTest", Test) {
  description = 'Runs the integration tests.'
  group = "verification"
  testClassesDirs = integTestSourceSet.output.classesDirs
  classpath = integTestSourceSet.runtimeClasspath
  mustRunAfter(tasks.named('test'))
}
def funcTestTask = tasks.register("funcTest", Test) {
  description = 'Runs the functional tests.'
  group = "verification"
  testClassesDirs = integTestSourceSet.output.classesDirs
  classpath = integTestSourceSet.runtimeClasspath
  mustRunAfter(integTestTask)
}

tasks.named('check') {
  dependsOn(integTestTask, funcTestTask)
}

tasks.withType(Test).configureEach {
  // Using JUnitPlatform for running all types of tests
  useJUnitPlatform()
}
